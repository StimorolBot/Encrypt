from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "7439633ee21c"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "User_Table",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column(
            "date_register",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("is_blocked", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_User_Table_email"), "User_Table", ["email"], unique=True
    )
    op.create_index(
        op.f("ix_User_Table_id"), "User_Table", ["id"], unique=False
    )
    op.create_table(
        "Path_Table",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column(
            "time",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["email"],
            ["User_Table.email"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("path"),
    )
    op.create_index(
        op.f("ix_Path_Table_email"), "Path_Table", ["email"], unique=True
    )
    op.create_table(
        "Token_Table",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["email"],
            ["User_Table.email"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("refresh_token"),
    )
    op.create_index(
        op.f("ix_Token_Table_email"), "Token_Table", ["email"], unique=True
    )
    op.create_table(
        "File_Table",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["email"],
            ["Path_Table.email"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_File_Table_name"), "File_Table", ["name"], unique=True
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_File_Table_name"), table_name="File_Table")
    op.drop_table("File_Table")
    op.drop_index(op.f("ix_Token_Table_email"), table_name="Token_Table")
    op.drop_table("Token_Table")
    op.drop_index(op.f("ix_Path_Table_email"), table_name="Path_Table")
    op.drop_table("Path_Table")
    op.drop_index(op.f("ix_User_Table_id"), table_name="User_Table")
    op.drop_index(op.f("ix_User_Table_email"), table_name="User_Table")
    op.drop_table("User_Table")
    # ### end Alembic commands ###
